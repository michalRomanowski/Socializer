@page "/login"

@using Socializer.BlazorHybrid.ViewModels
@using Socializer.Client

@inject ISocializerClient socializerClient
@inject LayoutState layoutState
@inject NavigationManager navigation
@inject StateContainer stateContainer

<div class="card">
    <div class="card-header">
        <h2 class="mb-0">@layoutState.Header</h2>
    </div>

    <div class="card-body">
        @if (layoutState.HasError)
        {
            <div class="alert alert-danger" role="alert">@layoutState.ErrorMessage</div>
        }

        <EditForm EditContext="@editContext" OnValidSubmit="LoginAsync" class="container mt-5">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label class="form-label">Username</label>
                <InputText class="form-control" @bind-Value="model.Username" title="Provide Username" />
                <ValidationMessage For="@(() => model.Username)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label class="form-label">Password</label>
                <InputText class="form-control" type="password" @bind-Value="model.Password" title="Provide password" />
                <ValidationMessage For="@(() => model.Password)" class="text-danger" />
            </div>

            <button class="btn btn-primary w-100 mb-2" type="submit">Login</button>
            <button class="btn btn-secondary w-100" @onclick="SignUp">Sign Up</button>
        </EditForm>
    </div>
</div>

@code {
    private LoginViewModel model = new();
    private EditContext editContext;
    private string error = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        layoutState.Header = "Login";
        editContext = new EditContext(model);

        if (Constants.DevLogin)
        {
            await LoginAsync(Constants.DevLoginUserame, Constants.DevLoginPass);
        }
    }

    private async Task LoginAsync()
    {
        await LoginAsync(model.Username, model.Password);
    }

    private async Task LoginAsync(string username, string password)
    {
        var loginResult = await socializerClient.LoginAsync(username, password);

        if (loginResult.IsSuccess == false)
        {
            error = string.Join(Environment.NewLine, loginResult.Errors) ?? "An error occurred during login.";
            return;
        }

        var getUserMeResult = await socializerClient.GetUserMeAsync();

        if (getUserMeResult.IsSuccess == false)
        {
            // Clean all login info. We don't want to continue in such case. A bit harsh as we force user to restart but for now OK.
            // Better like that for error feedback.
            SecureStorage.RemoveAll();

            layoutState.ErrorMessage = getUserMeResult.ErrorMessage;

            return;
        }

        stateContainer.User = getUserMeResult.Result;
        navigation.NavigateTo("/main");
    }

    private void SignUp()
    {
        navigation.NavigateTo("/signup");
    }
}
