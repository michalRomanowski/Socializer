@page "/chat"

@using Microsoft.AspNetCore.SignalR.Client
@using Socializer.BlazorHybrid.ViewModels
@using Socializer.Client.ChatClient
@using Socializer.Shared

@inject IChatConnectionClient chatConnectionClient
@inject IJSRuntime js
@inject LayoutState layoutState
@inject SharedSettings mobileAppSettings
@inject NavigationManager navigation
@inject StateContainer stateContainer

@implements IAsyncDisposable

<div class="chat-container">
    <div id="chat-messages" @ref="chatMessagesRef" class="chat-messages">
        @foreach (var message in chatViewModel.Messages)
        {
            <div class="message @StyleClass(message.Author)">@message.Content</div>
        }
    </div>

    <InputText class="input-field" @bind-Value="chatViewModel.NewMessage" title="Type message .." />

    <button class="button-big" @onclick="SendMessageAsync">Send</button>
</div>

@code {
    private EditContext editContext;
    private ElementReference chatMessagesRef;
    private ChatViewModel chatViewModel = new();

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(chatViewModel);
        layoutState.Header = $"Chat";

        // Init chat
        await chatConnectionClient.InitAsync(OnReceiveMessageAsync);

        await Task.Delay(100);
        await js.InvokeVoidAsync("scrollToBottom", chatMessagesRef); // TODO: Move to some service class
    }

    private async Task OnReceiveMessageAsync(string author, string content)
    {
        chatViewModel.Messages.Add(new ChatMessage() { Author = author, Content = content });
        await InvokeAsync(StateHasChanged);
        await js.InvokeVoidAsync("scrollToBottom", chatMessagesRef);
    }

    private async Task SendMessageAsync()
    {
        if (string.IsNullOrWhiteSpace(chatViewModel.NewMessage))
            return;

        var result = await chatConnectionClient.SendMessageAsync(stateContainer.User.Username, chatViewModel.NewMessage);

        if (result.IsSuccess)
        {
            chatViewModel.NewMessage = string.Empty;
        }
    }

    private string StyleClass(string author)
    {
        if(stateContainer.User.Username.Equals(author, StringComparison.InvariantCultureIgnoreCase))
			return "user-self";

        if ("bot".Equals(author, StringComparison.InvariantCultureIgnoreCase))
            return "user-bot";

		return "user-other";
    }

    public async ValueTask DisposeAsync()
    {
        await chatConnectionClient.DisposeAsync();
    }
}