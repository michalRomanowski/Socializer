@page "/chat/{ChatHash}"

@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@using Socializer.BlazorShared.Extensions
@using Socializer.BlazorShared.ViewModels
@using Socializer.Client.ChatClient
@using Socializer.Shared
@using Socializer.Shared.Extensions

@inject IChatConnectionClient chatConnectionClient
@inject IJSRuntime js
@inject LayoutState layoutState
@inject StateContainer stateContainer

@implements IAsyncDisposable

<div class="chat-container">
    <div id="chat-messages" @ref="chatMessagesRef" class="chat-messages">
        @foreach (var message in chatViewModel.Messages)
        {
            @* Example of button inside chat message: *@
            @* <div class="message @StyleClass(message.Author)">@message.Content.ToHtmlBreaks()<button class="button-big" @onclick="SendMessageAsync">Invite</button></div> *@
            <div class="message @StyleClass(message.Author)">@message.Content.ToHtmlBreaks()</div>
        }
    </div>

    <InputText class="input-field" maxlength="500" @bind-Value="chatViewModel.NewMessage" @onfocus="@ScrollToBottomIfBottomAsync" title="Type message .." />

    <button class="button-big" @onclick="SendMessageAsync">Send</button>
</div>

@code {
    [Parameter] public string ChatHash { get; set; }

    private EditContext editContext;
    private ElementReference chatMessagesRef;
    private ChatViewModel chatViewModel = new();

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(chatViewModel);
        layoutState.Header = $"Chat";

        // Init chat
        await chatConnectionClient.InitAsync(OnReceiveMessageAsync);
        await chatConnectionClient.JoinGroupAsync(ChatHash);

        await Task.Delay(100);
        await ScrollToBottomAsync();
    }

    private async Task OnReceiveMessageAsync(string author, string content)
    {
        chatViewModel.Messages.Add(new ChatMessage() { Author = author, Content = content });
        await InvokeAsync(StateHasChanged);
        await ScrollToBottomAsync();
    }

    private async Task SendMessageAsync()
    {
        if (string.IsNullOrWhiteSpace(chatViewModel.NewMessage))
            return;

        var result = await chatConnectionClient.SendMessageAsync(stateContainer.User.Id, ChatHash, chatViewModel.NewMessage);

        if (result.IsSuccess)
        {
            chatViewModel.NewMessage = string.Empty;
        }
    }

    private string StyleClass(string author)
    {
        if(stateContainer.User.Username.Equals(author, StringComparison.InvariantCultureIgnoreCase))
            return "user-self";

        if ("bot".Equals(author, StringComparison.InvariantCultureIgnoreCase))
            return "user-bot";

        if ("error".Equals(author, StringComparison.InvariantCultureIgnoreCase))
            return "user-error";

        return "user-other";
    }

    public async ValueTask DisposeAsync()
    {
        await chatConnectionClient.DisposeAsync();
    }

    private async Task ScrollToBottomAsync()
    {
        await Task.Delay(200);
        await js.InvokeVoidAsync("scrollToBottom", chatMessagesRef);
    }

    // TODO: Kill me for this func name
    private async Task ScrollToBottomIfBottomAsync()
    {
        if (await js.InvokeAsync<bool>("isScrollAtBottom", chatMessagesRef))
            await ScrollToBottomAsync();
    }
}